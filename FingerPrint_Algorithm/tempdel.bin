.ORIG x400B              ; Starting address of the program

LEA R0, #-10             ; Load the address of array_10 into R0
AND R1, R1, #0            ; Clear R1 (sum of array_10, only positive numbers)
LDR R3, R0, #0            ; Load the value at address R0 into R3
ADD R1, R1, R3            ; Add the value in R3 to the sum in R1
ADD R0, R0, #1            ; Move to the next memory location
LDR R4, R0, #0            ; Load the value at the next address into R4
BRzp #-6                   ; Otherwise, continue the loop
ST R1, x4000              ; Store the sum of array_10 at x4000
LEA R0, #50               ; Load the address of array_x into R0
AND R1, R1, #0            ; Clear R1 (sum of array_x)
LDR R3, R0, #0            ; Load the value at address R0 into R3
ADD R1, R1, R3            ; Add the value in R3 to the sum in R1
ADD R0, R0, #1            ; Move to the next memory location
NOT R3, R3                ; Invert the value of R3 to check if it's -1 (end of array).. If you not it will be true and therefore NZP will eqaul b010
BRn 0x300B                ; If R3 is not zero (i.e., not -1), repeat the loop
ST R1, x4001              ; Store the sum of array_x at x4001
HALT                      ; Halt the program








        .ORIG   x400B           ; Starting address of the program
POSITIVES  .FILL   x0001         ; Value 1 at POSITIVES
          .FILL   x0002         ; Value 2 at POSITIVES + 1
          .FILL   x0003         ; Value 3 at POSITIVES + 2
          .FILL   x0004         ; Value 4 at POSITIVES + 3
          .FILL   x0005         ; Value 5 at POSITIVES + 4
          .FILL   x0006         ; Value 6 at POSITIVES + 5
          .FILL   x0007         ; Value 7 at POSITIVES + 6
          .FILL   x0008         ; Value 8 at POSITIVES + 7
          .FILL   x0009         ; Value 9 at POSITIVES + 8
TARGET2    .FILL   x0000        ; Placeholder, value 0 (target for other array)
        LEA     R0, POSITIVES   ; Load the address of POSITIVES into R0
        AND R1, R1, #0         ; Clear R1 (sum of array, only positive numbers)
LOOP1:  LDR     R3, R0, #0     ; Load the value at address R0 into R3
        ADD     R1, R1, R3     ; Add the value in R3 to the sum in R1
        ADD     R0, R0, #1     ; Move to the next memory location
        LDR     R4, R0, #0     ; Load the value at the next address into R4
        BRzp    LOOP1          ; If R4 >= 0, continue the loop
        ST      R1, SUM1      ; Store the sum of POSITIVES at x4000
        LEA     R0, NEGATIVE   ; Load the address of NEGATIVE into R0
        AND     R1, R1, #0     ; Clear R1 (sum of NEGATIVE array)
LOOP2:  LDR     R3, R0, #0     ; Load the value at address R0 into R3
        ADD     R1, R1, R3     ; Add the value in R3 to the sum in R1
        ADD     R0, R0, #1     ; Move to the next memory location
        NOT     R3, R3         ; Invert the value of R3 to check if it's -1 (end of array)
        BRn     LOOP2          ; If R3 is not zero (i.e., not -1), repeat the loop
        ST      R1, SUM2      ; Store the sum of NEGATIVE at x4001
        HALT                   ; Halt the program
NEGATIVE  .FILL   xFFFB         ; -5
          .FILL   xFFFE         ; -2
          .FILL   xFFFD         ; -3
          .FILL   xFFFC         ; -4
          .FILL   xFFFF         ; -1 (Sentinel value indicating end of array)


SUM1 	  .FILL   x0000
SUM2      .FILL   x0000
        .END                    ; End of program
