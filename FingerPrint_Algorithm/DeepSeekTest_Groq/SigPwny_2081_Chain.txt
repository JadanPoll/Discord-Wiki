I know I think he just doesn’t like the concept (Message ID: 2081). the general concept is really useful though (Message ID: 2082). I could not understand what a trait in rust means no matter how hard I tried (Message ID: 2123). actually I didn't try that hard but a few attempts in trying to understand it it just made no sense to me (Message ID: 2125). Traits aren’t too hard of a concept to understand But Sometimes they can get wacky ~~orphan rule~~ (Message ID: 2126). https://www.reddit.com/r/rust/comments/b4a4fu/what_are_the_technical_reasons_for_the_orphan_rule/ (Message ID: 2128). I can't read this. just full of terminology that I don't understand (Message ID: 2129). > Rust has a rule that you cannot provide implementations of a trait for a struct unless you are either the crate that defines the struct, or the crate that defines the trait.
like, wtf is a trait? wtf is a crate? (Message ID: 2131). Crate is a CU (Message ID: 2132). wtf is a type trait? wtf is a template library? then why do they need to invent a new term for a CU? (Message ID: 2133). I dunno C++ things lmao https://en.cppreference.com/w/cpp/header/type_traits You've prolly used these if you've wanted to do metaprogramming (Message ID: 2134). C++ also makes no sense to me (Message ID: 2135). Template libraries are I'm guessing templated header-only libraries But might just be templated libraries Which, to be fair, usually are header-only Because C++ Yeah, that's fair It's only more complicated now that concepts are in the mix Also concepts make more sense imo (Message ID: 2136). >  is_function
> (C++11)
>     checks if a type is a function type
> (class template)
C++ functions are first class objects?! (Message ID: 2137). They can be Or, it's perhaps better to say that their aliases are So, you can pass a function type, which usually is just a wrapped function pointer And that can be a function type (i.e. `std::function`) So, no, they aren't But sometimes it's funky (Message ID: 2138). > a wrapped function pointer
ok cool (Message ID: 2139). 